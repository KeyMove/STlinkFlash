using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Text;
using System.Windows.Forms;

namespace STLINKFlash
{
    public partial class Form1 : Form
    {
        STLINKV2 stlink = new STLINKV2();
        public Form1()
        {
            InitializeComponent();
        }

        private void openstlink_Click(object sender, EventArgs e)
        {
            var ststs = stlink.openSTLink(stlink.getHandle()[0]);
            stlink.exitDFU();
            stlink.getMode();
            stlink.SWDMode();
            stlink.getMode();
            stlink.SWDSpeed(STLINKV2.SWDCLK.STLINK_SWDCLK_4MHZ_DIVISOR);
            coreid.Text = string.Format("0x{0:X8}", stlink.getCoreID());
            stlink.soft_reset();
            stlink.InitBP();
            stlink.Halt();
        }
        const int ADDR_STAS = 0x20000600;
        const int ADDR_XOR = 0x20000604;
        const int ADDR_SUM = 0x20000608;
        const int ADDR_ADDR = 0x2000060C;
        const int ADDR_DATA = 0x20000610;
        byte[] codedata = {
            0x90,0x07,0x00,0x20,0xD5,0x00,0x00,0x20,0xDD,0x00,0x00,0x20,0xDF,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE1,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE3,0x00,0x00,0x20,0xE5,0x00,0x00,0x20,
0xE7,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0xE7,0x00,0x00,0x20,0xE7,0x00,0x00,0x20,0xE7,0x00,0x00,0x20,0xE7,0x00,0x00,0x20,0xE7,0x00,0x00,0x20,0xE7,0x00,0x00,0x20,
0xE7,0x00,0x00,0x20,0xE7,0x00,0x00,0x20,0xE7,0x00,0x00,0x20,0xE7,0x00,0x00,0x20,0xE7,0x00,0x00,0x20,0xE7,0x00,0x00,0x20,0xE7,0x00,0x00,0x20,0xE7,0x00,0x00,0x20,
0x00,0x00,0x00,0x00,0xE7,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE7,0x00,0x00,0x20,0xE7,0x00,0x00,0x20,0xE7,0x00,0x00,0x20,
0x00,0x00,0x00,0x00,0xE7,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0xE7,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x03,0x48,0x85,0x46,0x00,0xF0,0x14,0xF8,0x00,0x48,0x00,0x47,0x91,0x05,0x00,0x20,0x90,0x07,0x00,0x20,0x04,0x48,0x80,0x47,0x04,0x48,0x00,0x47,0xFE,0xE7,0xFE,0xE7,
0xFE,0xE7,0xFE,0xE7,0xFE,0xE7,0xFE,0xE7,0xB9,0x03,0x00,0x20,0xC1,0x00,0x00,0x20,0x06,0x4C,0x01,0x25,0x06,0x4E,0x05,0xE0,0xE3,0x68,0x07,0xCC,0x2B,0x43,0x0C,0x3C,
0x98,0x47,0x10,0x34,0xB4,0x42,0xF7,0xD3,0xFF,0xF7,0xDE,0xFF,0xC0,0x05,0x00,0x20,0xE0,0x05,0x00,0x20,0x01,0x48,0x41,0x68,0x04,0x20,0x08,0x47,0xA8,0x05,0x00,0x20,
0x01,0x48,0x41,0x68,0x06,0x20,0x08,0x47,0xA8,0x05,0x00,0x20,0x70,0xB5,0x08,0x4D,0x04,0x46,0x69,0x68,0x20,0x20,0x88,0x47,0x20,0x02,0x69,0x68,0x00,0x0E,0x88,0x47,
0x20,0x04,0x69,0x68,0x00,0x0E,0x88,0x47,0x69,0x68,0xE0,0xB2,0x88,0x47,0x70,0xBD,0xA8,0x05,0x00,0x20,0xF8,0xB5,0x0E,0x4C,0x0D,0x46,0x07,0x46,0x61,0x68,0x16,0x46,
0x03,0x20,0x88,0x47,0x38,0x02,0x61,0x68,0x00,0x0E,0x88,0x47,0x38,0x04,0x61,0x68,0x00,0x0E,0x88,0x47,0x61,0x68,0xF8,0xB2,0x88,0x47,0x03,0xE0,0xA0,0x68,0x80,0x47,
0x30,0x70,0x76,0x1C,0x28,0x46,0x6D,0x1E,0xAD,0xB2,0x00,0x28,0xF6,0xD1,0xF8,0xBD,0xA8,0x05,0x00,0x20,0x10,0xB5,0x03,0x4C,0x05,0x20,0x61,0x68,0x88,0x47,0xA0,0x68,
0x80,0x47,0x10,0xBD,0xA8,0x05,0x00,0x20,0xF8,0xB5,0x12,0x4D,0x07,0x46,0x69,0x69,0x10,0x20,0x81,0x43,0x69,0x61,0x10,0x4C,0x4B,0x20,0x61,0x68,0x88,0x47,0x61,0x68,
0x00,0x20,0x88,0x47,0x61,0x68,0x00,0x20,0x88,0x47,0x61,0x68,0x00,0x20,0x88,0x47,0x61,0x68,0x00,0x20,0x88,0x47,0x00,0x26,0xA0,0x68,0x80,0x47,0x38,0x70,0x76,0x1C,
0xF6,0xB2,0x7F,0x1C,0x08,0x2E,0xF7,0xD3,0x68,0x69,0x10,0x21,0x08,0x43,0x68,0x61,0xF8,0xBD,0x00,0x00,0x00,0x08,0x00,0x48,0xA8,0x05,0x00,0x20,0x10,0xB5,0xFF,0xF7,
0xC9,0xFF,0xC0,0x07,0xC0,0x0F,0x10,0xBD,0xF8,0xB5,0x0E,0x4C,0x0D,0x46,0x07,0x46,0x61,0x68,0x16,0x46,0x02,0x20,0x88,0x47,0x38,0x02,0x61,0x68,0x00,0x0E,0x88,0x47,
0x38,0x04,0x61,0x68,0x00,0x0E,0x88,0x47,0xF8,0xB2,0x61,0x68,0x02,0xE0,0x30,0x78,0x61,0x68,0x76,0x1C,0x88,0x47,0x28,0x46,0x6D,0x1E,0xAD,0xB2,0x00,0x28,0xF6,0xD1,
0xF8,0xBD,0x00,0x00,0xA8,0x05,0x00,0x20,0x00,0xB5,0x00,0x22,0x03,0x21,0x01,0x20,0x00,0xF0,0x60,0xF8,0x00,0xBD,0x00,0x00,0x30,0xB5,0x23,0x48,0x41,0x69,0x01,0x22,
0x92,0x04,0x11,0x43,0x41,0x61,0x41,0x69,0x52,0x00,0x11,0x43,0x41,0x61,0x41,0x69,0x52,0x00,0x11,0x43,0x41,0x61,0x1D,0x49,0x48,0x69,0x10,0x23,0x18,0x43,0x48,0x61,
0x1B,0x4A,0x50,0x69,0x18,0x24,0x20,0x43,0x50,0x61,0x1A,0x48,0x44,0x69,0x0C,0x25,0x2C,0x43,0x44,0x61,0x44,0x69,0x9C,0x43,0x44,0x61,0x0C,0x68,0xAB,0x01,0x9C,0x43,
0x0C,0x60,0x0C,0x68,0xFF,0x25,0x01,0x35,0x2C,0x43,0x0C,0x60,0xCC,0x68,0x9C,0x43,0xCC,0x60,0x13,0x68,0x0F,0x21,0x89,0x01,0x8B,0x43,0x13,0x60,0x13,0x68,0xFF,0x24,
0x41,0x34,0x23,0x43,0x13,0x60,0xD3,0x68,0x8B,0x43,0xD3,0x60,0x02,0x68,0x3F,0x21,0x09,0x01,0x8A,0x43,0x02,0x60,0x02,0x68,0xFF,0x23,0x51,0x33,0x1A,0x43,0x02,0x60,
0xC2,0x68,0x8A,0x43,0xC2,0x60,0x30,0xBD,0x00,0x10,0x02,0x40,0x00,0x04,0x00,0x48,0x00,0x08,0x00,0x48,0x00,0x0C,0x00,0x48,0x05,0x48,0x81,0x68,0x89,0x07,0xFC,0xD5,
0xFF,0x21,0x01,0x73,0x81,0x68,0xC9,0x07,0xFC,0xD0,0xC0,0x68,0xC0,0xB2,0x70,0x47,0x00,0x30,0x01,0x40,0x70,0xB5,0x1E,0x4B,0x9C,0x69,0x9D,0x14,0x2C,0x43,0x9C,0x61,
0x5C,0x69,0xEE,0x01,0x34,0x43,0x5C,0x61,0x1A,0x4C,0x00,0x23,0x63,0x60,0x23,0x60,0x00,0x28,0x03,0xD0,0x20,0x68,0x04,0x23,0x18,0x43,0x20,0x60,0x48,0x07,0x20,0x68,
0x02,0xD5,0x07,0x23,0xDB,0x01,0x01,0xE0,0x03,0x23,0x1B,0x02,0x18,0x43,0x20,0x60,0x20,0x68,0x89,0x07,0x89,0x0F,0x08,0x43,0x20,0x60,0x50,0x07,0x40,0x0F,0x00,0xF0,
0x1F,0xF8,0x60,0x68,0x28,0x43,0x60,0x60,0x0B,0x48,0x01,0x68,0x3F,0x22,0x92,0x02,0x91,0x43,0x01,0x60,0x01,0x68,0x15,0x22,0xD2,0x02,0x11,0x43,0x01,0x60,0x01,0x6A,
0x06,0x4A,0x11,0x43,0x01,0x62,0x20,0x68,0x40,0x21,0x08,0x43,0x20,0x60,0x70,0xBD,0x00,0x10,0x02,0x40,0x00,0x30,0x01,0x40,0x00,0x08,0x00,0x48,0x00,0x00,0x20,0x22,
0x04,0x49,0x0A,0x68,0x38,0x23,0x9A,0x43,0x0A,0x60,0x0A,0x68,0xC0,0x00,0x02,0x43,0x0A,0x60,0x70,0x47,0x00,0x30,0x01,0x40,0x06,0x48,0x00,0x21,0x81,0x60,0x41,0x68,
0xF0,0x22,0x91,0x43,0x41,0x60,0x04,0x48,0x01,0x68,0x03,0x22,0x11,0x43,0x01,0x60,0x70,0x47,0x00,0x00,0x00,0x10,0x02,0x40,0x00,0x00,0x01,0x40,0x04,0x49,0x8A,0x68,
0x92,0x07,0xFC,0xD5,0x08,0x73,0x88,0x68,0xC0,0x07,0xFC,0xD0,0xC8,0x68,0x70,0x47,0x00,0x30,0x01,0x40,0x02,0xE0,0x08,0xC8,0x12,0x1F,0x08,0xC1,0x00,0x2A,0xFA,0xD1,
0x70,0x47,0x70,0x47,0x00,0x20,0x01,0xE0,0x01,0xC1,0x12,0x1F,0x00,0x2A,0xFB,0xD1,0x70,0x47,0x08,0xB5,0x00,0x23,0x0A,0xE0,0x69,0x46,0x0B,0x70,0x03,0xE0,0x6A,0x46,
0x11,0x78,0x49,0x1C,0x11,0x70,0x69,0x46,0x09,0x78,0xFA,0x29,0xF7,0xD3,0x01,0x46,0x40,0x1E,0x80,0xB2,0x00,0x29,0xEF,0xD1,0x08,0xBD,0x01,0x46,0x40,0x1E,0x80,0xB2,
0x00,0x29,0xFA,0xD1,0x70,0x47,0x00,0x00,0xF8,0xB5,0x41,0x4E,0x30,0x78,0x00,0x07,0x00,0x0F,0x23,0xD0,0x80,0x27,0x3F,0x4C,0x10,0x25,0x01,0x28,0x05,0xD0,0x02,0x28,
0x0D,0xD0,0x03,0x28,0x4B,0xD0,0x00,0x20,0x17,0xE0,0x60,0x69,0xA8,0x43,0x60,0x61,0xFF,0x21,0x39,0x4A,0x01,0x31,0xF0,0x68,0xFF,0xF7,0x6C,0xFE,0x63,0xE0,0x36,0x4A,
0x01,0x21,0x10,0x78,0x53,0x5C,0x18,0x18,0x49,0x1C,0x09,0x06,0x80,0xB2,0x09,0x0E,0xF8,0xD1,0xB1,0x68,0x88,0x42,0x02,0xD0,0x40,0x20,0x30,0x60,0xF8,0xBD,0x60,0x69,
0xA8,0x43,0x60,0x61,0xFF,0xF7,0x3C,0xFE,0x60,0x69,0x28,0x43,0x60,0x61,0x60,0x69,0xA8,0x43,0x60,0x61,0xFF,0xF7,0xA2,0xFE,0x00,0x28,0x60,0x69,0x06,0xD0,0x28,0x43,
0x60,0x61,0x26,0x48,0x41,0x68,0x01,0x20,0x88,0x47,0xF0,0xE7,0xA8,0x43,0x60,0x61,0xFF,0xF7,0x26,0xFE,0x60,0x69,0x28,0x43,0x60,0x61,0x60,0x69,0xA8,0x43,0x60,0x61,
0xFF,0x21,0x1D,0x4A,0x01,0x31,0xF0,0x68,0xFF,0xF7,0x8E,0xFE,0x60,0x69,0x28,0x43,0x60,0x61,0x60,0x69,0xA8,0x43,0x60,0x61,0xFF,0xF7,0x0C,0xFE,0x23,0xE0,0x60,0x69,
0xA8,0x43,0x60,0x61,0xFF,0xF7,0x0C,0xFE,0x60,0x69,0x28,0x43,0x60,0x61,0x60,0x69,0xA8,0x43,0x60,0x61,0xFF,0xF7,0x72,0xFE,0x00,0x28,0x60,0x69,0x06,0xD0,0x28,0x43,
0x60,0x61,0x0E,0x48,0x41,0x68,0x01,0x20,0x88,0x47,0xF0,0xE7,0xA8,0x43,0x60,0x61,0xFF,0xF7,0xF6,0xFD,0x60,0x69,0x28,0x43,0x60,0x61,0x60,0x69,0xA8,0x43,0x60,0x61,
0xF0,0x68,0xFF,0xF7,0xF3,0xFD,0x60,0x69,0x28,0x43,0x60,0x61,0x37,0x60,0xF8,0xBD,0x00,0x06,0x00,0x20,0x00,0x08,0x00,0x48,0x10,0x06,0x00,0x20,0xB4,0x05,0x00,0x20,
0x1C,0xB5,0x68,0x46,0xFF,0xF7,0x20,0xFE,0x00,0x20,0x07,0x4A,0x01,0x46,0x6B,0x46,0x50,0x60,0x5C,0x5C,0x49,0x1C,0x20,0x18,0xC9,0xB2,0x08,0x29,0xF9,0xD3,0x55,0x21,
0x48,0x40,0x50,0x60,0x1C,0xBD,0x00,0x00,0x00,0x06,0x00,0x20,0x70,0x47,0x00,0x00,0xFF,0xF7,0x62,0xFE,0x03,0x48,0x00,0x68,0x80,0x47,0xFF,0xF7,0xE1,0xFF,0xFF,0xF7,
0x53,0xFF,0xFC,0xE7,0xA8,0x05,0x00,0x20,0x49,0x02,0x00,0x20,0xDD,0x03,0x00,0x20,0xF9,0x02,0x00,0x20,0x8D,0x05,0x00,0x20,0x13,0x04,0x00,0x20,0x3B,0x04,0x00,0x20,
0xE0,0x05,0x00,0x20,0x00,0x06,0x00,0x20,0x10,0x00,0x00,0x00,0xF4,0x03,0x00,0x20,0xF0,0x05,0x00,0x20,0x10,0x06,0x00,0x20,0x80,0x01,0x00,0x00,0x04,0x04,0x00,0x20,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, };
        OpenFileDialog of = new OpenFileDialog();
        private void stlinkop_Click(object sender, EventArgs e)
        {
            of.Filter = "数据文件(*.dat)|*.dat|所有文件(*.*)|*.*";
            if (of.ShowDialog() == DialogResult.OK)
            {
                string path = this.of.FileName;
                //StreamReader sr = new StreamReader(path);
                //var hex = sr.ReadToEnd();
                //sr.Close();
                //var data = stlink.hex80(hex);
                //var outdata = new byte[data.Length];
                //stlink.Halt();
                //stlink.soft_reset();
                //stlink.writeMem(0x20000000, codedata.Length, codedata);
                //stlink.readMem(0x20000000, codedata.Length, outdata);

                ////stlink.WriteReg(13, stlink.ReadDBGREG(0x20000000));
                ////stlink.WriteReg(15, stlink.ReadDBGREG(0x20000004));
                //stlink.WriteReg(15, 0x20000000);
                //stlink.WriteDBGREG(0xE000ED08, 0x20000000);
                //stlink.Go();
                //var xor = stlink.ReadDBGREG(ADDR_XOR);
                //stlink.ReadReg(15);
                //stlink.readMem(0x20000600, data.Length, data);
                //stlink.WriteDBGREG(0x20000600, 1);
                //stlink.readMem(0x20000600, data.Length, data);
                FileStream fs = new FileStream(path, FileMode.Open);
                byte[] data = new byte[fs.Length];
                fs.Read(data, 0, data.Length);
                fs.Close();
                stlink.soft_reset();
                stlink.writeMem(0x20000000, codedata.Length, codedata);
                stlink.WriteReg(15, 0x20000000);
                stlink.WriteDBGREG(0xE000ED08, 0x20000000);
                stlink.Go();
                writedata(int.Parse(addrtext.Text), data);

            }

            //stlink.Halt();
            //stlink.HWreset();
            //stlink.WriteReg(0, 0x11223344);
            //stlink.ReadReg(0);
            //stlink.ReadReg(15);
            //stlink.ReadReg(14);
            //stlink.ReadReg(13);
            //byte[] data = new byte[256];
            //for (int i = 0; i < 256; i++) data[i] = (byte)i;
            //stlink.writeMem(0x20000000, 256, data);
            //stlink.readMem(0x20000000, 256, data);
            //stlink.readMem(0x08000000, 256, data);
            //stlink.readMem(536868864U, 256, data);
        }

        void readdata(string path,int addr,int len)
        {
            MemoryStream ms = new MemoryStream();
            byte[] data = new byte[256];
            int size = len;
            new System.Threading.Thread(() => {
                while (len >= 256)
                {
                    stlink.WriteDBGREG(ADDR_ADDR, (uint)addr);
                    stlink.WriteDBGREG(ADDR_STAS, 1);
                    while (stlink.ReadDBGREG(ADDR_STAS) != 0x80) System.Threading.Thread.Sleep(0);
                    stlink.readMem(ADDR_DATA, data.Length, data);
                    addr += 256;
                    len -= 256;
                    ms.Write(data, 0, data.Length);
                    Invoke(new MethodInvoker(() => {
                        progressBar1.Value = 100 * (size - len) / size;
                    }));
                }
                stlink.WriteDBGREG(ADDR_ADDR, (uint)addr);
                stlink.WriteDBGREG(ADDR_STAS, 1);
                while (stlink.ReadDBGREG(ADDR_STAS) != 0x80) System.Threading.Thread.Sleep(0);
                stlink.readMem(ADDR_DATA, data.Length, data);
                ms.Write(data, 0, len);

                FileStream fs = new FileStream(path, FileMode.OpenOrCreate);
                var datas = ms.ToArray();
                fs.Write(datas, 0, datas.Length);
                fs.Flush();
                fs.Close();
                ms.Close();
                Invoke(new MethodInvoker(() => {
                    progressBar1.Value = 100;
                }));

            }).Start();

        }

        void writedata(int addr, byte[] input)
        {
            MemoryStream ms = new MemoryStream(input);
            byte[] data = new byte[256];
            int len;
            int size = len = input.Length;
            int easraddr = addr&0x7ffff000;
            int retry = 0;
            int pos = 0;
            bool easr = true;
            int sum = 0;
            new System.Threading.Thread(() => {

                uint st;
                while (len >= 256)
                {
                    retry = 1;
                    if (easr)
                        if ((addr + 256) > easraddr)
                        {
                            stlink.WriteDBGREG(ADDR_ADDR, (uint)easraddr);
                            stlink.WriteDBGREG(ADDR_STAS, 3);
                            while (stlink.ReadDBGREG(ADDR_STAS) != 0x80) System.Threading.Thread.Sleep(0);
                            System.Threading.Thread.Sleep(50);
                            easraddr += 4096;
                            retry = 3;
                        }
                    ms.Read(data, 0, 256);
                    sum = 0;
                    for (int i = 0; i < 256; i++)
                        sum += data[i];
                    
                    while (retry-- != 0)
                    {
                        stlink.writeMem(ADDR_DATA, data.Length, data);
                        stlink.WriteDBGREG(ADDR_ADDR, (uint)addr);
                        stlink.WriteDBGREG(ADDR_SUM, (uint)sum);
                        stlink.WriteDBGREG(ADDR_STAS, 2);
                        while ((st = stlink.ReadDBGREG(ADDR_STAS)) != 0x80)
                        {
                            if (st == 0x40) { retry++;break; }
                            System.Threading.Thread.Sleep(0);
                        }
                    }
                    pos += 256;
                    addr += 256;
                    len -= 256;
                    Invoke(new MethodInvoker(() => {
                        progressBar1.Value = 100 * (size - len) / size;
                    }));
                }

                retry = 1;
                if (easr)
                    if ((addr + len) > easraddr)
                    {
                        stlink.WriteDBGREG(ADDR_ADDR, (uint)easraddr);
                        stlink.WriteDBGREG(ADDR_STAS, 3);
                        while (stlink.ReadDBGREG(ADDR_STAS) != 0x80) System.Threading.Thread.Sleep(0);
                        System.Threading.Thread.Sleep(50);
                        easraddr += 4096;
                        retry = 3;
                    }
                for (int i = 0; i < 256; i++)
                    data[i] = 0xff;
                ms.Read(data, 0, len);
                sum = 0;
                for (int i = 0; i < 256; i++)
                    sum += data[i];
                while (retry-- != 0)
                {
                    stlink.writeMem(ADDR_DATA, data.Length, data);
                    stlink.WriteDBGREG(ADDR_ADDR, (uint)addr);
                    stlink.WriteDBGREG(ADDR_SUM, (uint)sum);
                    stlink.WriteDBGREG(ADDR_STAS, 2);
                    while ((st = stlink.ReadDBGREG(ADDR_STAS)) != 0x80)
                    {
                        if (st == 0x40) { retry++; break; }
                        System.Threading.Thread.Sleep(0);
                    }
                }

                Invoke(new MethodInvoker(() => {
                    progressBar1.Value = 100;
                }));

            }).Start();

        }

        protected override void OnFormClosed(FormClosedEventArgs e)
        {
            stlink.closeSTLink();
            base.OnFormClosed(e);
        }

        SaveFileDialog sf = new SaveFileDialog();
        private void button1_Click(object sender, EventArgs e)
        {
            sf.Filter = "数据文件(*.dat)|*.dat";
            if (sf.ShowDialog() == DialogResult.OK)
            {
                stlink.soft_reset();
                stlink.writeMem(0x20000000, codedata.Length, codedata);
                stlink.WriteReg(15, 0x20000000);
                stlink.WriteDBGREG(0xE000ED08, 0x20000000);
                stlink.Go();
                readdata(sf.FileName, int.Parse(addrtext.Text), int.Parse(lentext.Text));
            }
        }
    }
}
